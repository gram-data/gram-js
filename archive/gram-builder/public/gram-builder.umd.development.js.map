{"version":3,"file":"gram-builder.umd.development.js","sources":["../src/gram-builder.ts"],"sourcesContent":["/**\n * This is the doc comment for gram-builder.\n *\n * @packageDocumentation\n */\n\nimport { Node as UnistNode } from 'unist';\nimport {\n  GramPathSeq,\n  GramPath,\n  GramNode,\n  GramEdge,\n  GramProperty,\n  GramLiteral,\n  Relation,\n  Navigation,\n  BooleanLiteral,\n  StringLiteral,\n  TaggedLiteral,\n  IntegerLiteral,\n  DecimalLiteral,\n  HexadecimalLiteral,\n  OctalLiteral,\n  MeasurementLiteral,\n  GramRecord,\n  GramPathlike,\n  GramUnit,\n  isGramNode,\n  isGramUnit,\n  isGramEdge,\n  isGramPath,\n  UNIT_ID,\n} from '@gram-data/gram-ast';\n\nexport type Children<T> = T | T[] | (() => T | T[]);\n\nfunction normalizeChildren<T extends UnistNode>(children?: Children<T>): T[] {\n  if (Array.isArray(children)) {\n    return children;\n  } else if (children instanceof Function) {\n    const res = children();\n    return normalizeChildren<T>(res);\n  } else if (typeof children === 'undefined') {\n    return [];\n  } else {\n    return [children];\n  }\n}\n\nconst dateToYMD = (d: Date) => d.toISOString().slice(0, 10);\n\nconst dateToDayOfMonth = (d: Date) => '--' + d.toISOString().slice(5, 10);\n\n/**\n * Build a path sequence that represents a graph\n * accumulating structure over time.\n *\n * @param paths sequence of paths through history\n * @param id optional reference identifier. The \"name\" of this graph instance.\n * @param labels optional labels\n * @param record optional graph-level data\n */\nexport const seq = (\n  paths: Children<GramPathlike>,\n  id?: string,\n  labels?: string[],\n  record?: GramRecord\n): GramPathSeq => ({\n  type: 'seq',\n  ...(id && { id }),\n  ...(labels && { labels }),\n  ...(record && { record }),\n  children: normalizeChildren<GramPathlike>(paths),\n});\n\n\nexport interface PathAttributes {\n  id?: string;\n  labels?: string[];\n  record?: GramRecord;\n  relation?: Relation\n}\n\n/**\n * Reduce paths into a single path composed using the given relation.\n *\n * @parm relation the relation to apply to all sub-paths\n * @param paths sub-paths to be paired\n */\nexport const reduce = (\n  relation: Relation = 'pair',\n  paths: Children<GramPathlike>,\n): [GramPathlike] | [] => {\n  const pathlist = normalizeChildren(paths);\n  if (pathlist) {\n    if (pathlist.length > 1) {\n      return [\n        pathlist.reduceRight( (acc, curr) => { return cons([curr,acc], {relation}) }, UNIT)\n      ];\n    } else {\n      return [pathlist[0]];\n    }\n  }\n  return []; \n}\n\n/**\n * Build any path-like element\n *\n * @param members sub-paths to compose\n * @param attributes attributes\n */\nexport const cons = (\n  members: [] | [GramPathlike] | [GramPathlike, GramPathlike],\n  attributes: PathAttributes = {}\n): GramPathlike => {\n  const element: any = {\n    type: 'path',\n    id: attributes.id,\n    ...(attributes.labels && { labels: attributes.labels }),\n    ...(attributes.record && { record: attributes.record }),\n    children: members.filter(child => child && !isGramUnit(child))\n  };\n  if (element.children.length === 0) {\n    if (element.id || (element.labels && element.labels.length > 0) || element.record ) {\n      element.type = 'node';\n      // element.id = element.id || identity.shortID();\n      return element as GramNode;\n    } else {\n      return UNIT;\n    }\n  } else if (element.children.length === 1) {\n    const inner = element.children[0];\n    if (element.id) {\n      if (isGramUnit(inner)) {\n        element.type = 'node';\n        element.children = [];\n        return element as GramNode;\n      }\n      return element as GramPath;\n    } else {\n      if (isGramUnit(inner)) return inner as GramUnit;\n      // element.id = identity.shortID();\n      if (isGramNode(inner)) return inner as GramNode;\n      if (isGramEdge(inner)) return inner as GramEdge;\n      if (isGramPath(inner)) return inner as GramPath;\n    }\n  } else if (element.children.length === 2) {\n    if (\n      attributes.relation && attributes.relation !== 'pair' &&\n      isGramNode(element.children[0]) &&\n      isGramNode(element.children[1])\n    ) {\n      element.type = 'edge';\n      // element.id = element.id || identity.shortID();\n      element.relation = attributes.relation;\n      return element as GramEdge;\n    }\n  }\n  // element.id = element.id || identity.shortID();\n  element.relation = attributes.relation || 'pair';\n  return element as GramPath;\n};\n\n/**\n * Singleton instance of GramUnit\n */\nexport const UNIT: GramUnit = {\n  type: 'unit',\n  id: UNIT_ID,\n  labels: undefined,\n  record: undefined,\n  children: [],\n};\n\n/**\n * Convenience function for retrieving the singleton GramUnit.\n */\nexport const unit = (): GramUnit => UNIT;\n\n/**\n * Build a GramNode.\n *\n * @param id identifier\n * @param labels\n * @param record\n * @param annotation\n */\nexport const node = (\n  id?: string,\n  labels?: string[],\n  record?: GramRecord\n): GramNode => ({\n  type: 'node',\n  // id: id || identity.shortID(),\n  id,\n  ...(labels && { labels }),\n  ...(record && { record }),\n  children: [],\n});\n\n/**\n * Build an Edge.\n *\n * @param children\n * @param relation\n * @param id\n * @param labels\n * @param record\n */\nexport const edge = (\n  children: [GramNode, GramNode],\n  relation: Navigation = 'right',\n  id?: string,\n  labels?: string[],\n  record?: GramRecord\n): GramEdge => ({\n  type: 'edge',\n  // id: id || identity.shortID(),\n  id,\n  ...(labels && { labels }),\n  ...(record && { record }),\n  relation,\n  children,\n});\n\n/**\n * Build a path\n *\n * @param children\n * @param id\n * @param labels\n * @param record\n */\nexport const path = (\n  members: [GramPathlike] | [GramPathlike, GramPathlike],\n  id?: string,\n  labels?: string[],\n  record?: GramRecord\n): GramPath => ({\n  type: 'path',\n  ...(id && { id }),\n  ...(labels && { labels }),\n  ...(record && { record }),\n  children: members,\n});\n\nexport const record = (properties: GramProperty[]): GramRecord => {\n  return properties.reduce((acc: GramRecord, p: GramProperty) => {\n    acc[p.name] = p.value;\n    return acc;\n  }, {} as GramRecord);\n};\n\nexport const property = (\n  name: string,\n  value: GramLiteral | GramLiteral[]\n): GramProperty => {\n  const Node: GramProperty = {\n    type: 'property',\n    name,\n    value,\n  };\n  return Node;\n};\n\nexport const boolean = (value: boolean): BooleanLiteral => ({\n  type: 'boolean',\n  value: value ? 'true' : 'false',\n});\n\nexport const string = (value: string): StringLiteral => ({\n  type: 'string',\n  value,\n});\n\nexport const tagged = (tag: string, value: string): TaggedLiteral => ({\n  type: 'tagged',\n  value,\n  tag,\n});\n\nexport const integer = (value: string | number): IntegerLiteral => ({\n  type: 'integer',\n  value: String(value),\n});\n\nexport const decimal = (value: string | number): DecimalLiteral => ({\n  type: 'decimal',\n  value: String(value),\n});\n\nexport const hexadecimal = (value: string): HexadecimalLiteral => ({\n  type: 'hexadecimal',\n  value,\n});\n\nexport const octal = (value: string): OctalLiteral => ({\n  type: 'octal',\n  value,\n});\n\nexport const measurement = (\n  unit: string,\n  value: string | number\n): MeasurementLiteral => ({\n  type: 'measurement',\n  value: String(value),\n  unit,\n});\n\nexport const year = (value: string | Date): TaggedLiteral =>\n  tagged(\n    value instanceof Date ? value.getFullYear().toString() : value,\n    'date'\n  );\n\nexport const date = (value: string | Date): TaggedLiteral =>\n  tagged(value instanceof Date ? dateToYMD(value) : value, 'date');\n\nexport const dayOfMonth = (value: string | Date): TaggedLiteral =>\n  tagged(value instanceof Date ? dateToDayOfMonth(value) : value, 'date');\n\nexport const time = (value: string | Date): TaggedLiteral =>\n  tagged(value instanceof Date ? dateToYMD(value) : value, 'time');\n\nexport const flatten = (xs: any[], depth = 1) =>\n  xs.flat(depth).filter(x => x !== null);\n\nexport default {\n  seq,\n  unit,\n  cons,\n  path,\n  node,\n  edge,\n  record,\n  property,\n  boolean,\n  string,\n  tagged,\n  integer,\n  decimal,\n  hexadecimal,\n  octal,\n  measurement,\n  date,\n  time,\n  flatten,\n};\n"],"names":["normalizeChildren","children","Array","isArray","Function","res","dateToYMD","d","toISOString","slice","dateToDayOfMonth","seq","paths","id","labels","record","type","reduce","relation","pathlist","length","reduceRight","acc","curr","cons","UNIT","members","attributes","element","filter","child","isGramUnit","inner","isGramNode","isGramEdge","isGramPath","UNIT_ID","undefined","unit","node","edge","path","properties","p","name","value","property","Node","boolean","string","tagged","tag","integer","String","decimal","hexadecimal","octal","measurement","year","Date","getFullYear","toString","date","dayOfMonth","time","flatten","xs","depth","flat","x"],"mappings":"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"}