{"version":3,"file":"gram-stringify.umd.development.js","sources":["../src/gram-stringify.ts","../src/gram-stringify-plugin.ts"],"sourcesContent":["import {\n  GramNode,\n  GramEdge,\n  GramRecord,\n  GramPath,\n  GramRecordValue,\n  GramProperty,\n  isLiteral,\n  isGramNode,\n  isGramEdge,\n  GramSeq,\n  isGramEmptyPath,\n  isGramLiteralArray,\n  GramPropertyMap,\n  GramLiteral,\n} from '@gram-data/gram-ast';\n\nconst isEmpty = (o: any) => Object.keys(o).length === 0;\n\nfunction assertNever(x: never): never {\n  throw new Error('Unexpected object: ' + x);\n}\nconst toStringLiteral = (l: GramLiteral): string => {\n  switch (l.type) {\n    case 'integer':\n    case 'boolean':\n    case 'octal':\n    case 'hexadecimal':\n    case 'decimal':\n      return l.value;\n    case 'string':\n      return `\\`${l.value}\\``;\n    case 'tagged':\n      return `${l.tag}\\`${l.value}\\``;\n    case 'measurement':\n      return `${l.value}${l.unit}`;\n    default:\n      return assertNever(l);\n  }\n};\n\nconst toStringValue = (v: GramRecordValue) => {\n  if (isGramLiteralArray(v)) {\n    return `[${v.map((l: GramLiteral) => toStringLiteral(l)).join(',')}]`;\n  } else if (isLiteral(v)) {\n    return toStringLiteral(v);\n  } else {\n    return recordToString(v);\n  }\n};\n\nconst recordToString = (record: GramRecord): string => {\n  const fields = record.map(\n    (property: GramProperty, i: number) =>\n      `${i > 0 ? ',' : ''}${property.name}:${toStringValue(property.value)}`\n  );\n  return `{${fields.join('')}}`;\n};\n\nconst recordMapToString = (record: GramPropertyMap): string => {\n  const fields = Object.entries(record).map(\n    ([name, value], i: number) =>\n      `${i > 0 ? ',' : ''}${name}:${toStringValue(value)}`\n  );\n  return `{${fields.join('')}}`;\n};\n\nconst elementContentToString = (ast: GramPath): string => {\n  const idString = ast.id || '';\n  const labelsString =\n    ast.labels && ast.labels.length > 0 ? ':' + ast.labels.join(':') : '';\n  const recordString =\n    ast.record && !isEmpty(ast.record) ? recordToString(ast.record) : '';\n  return `${idString}${labelsString}${\n    ((idString.length > 0 || labelsString.length > 0) && recordString.length) >\n    0\n      ? ' '\n      : ''\n  }${recordString}`;\n};\n\nconst nodeToString = (ast: GramNode): string =>\n  `(${elementContentToString(ast)})`;\n\nconst edgeToString = (ast: GramEdge): string => {\n  const left = ast.kind === 'left' ? '<-' : '-';\n  const right = ast.kind === 'right' ? '->' : '-';\n\n  const leftNode = isGramNode(ast.children[0])\n    ? nodeToString(ast.children[0])\n    : edgeToString(ast.children[0]);\n  const rightNode = isGramNode(ast.children[1])\n    ? nodeToString(ast.children[1])\n    : edgeToString(ast.children[1]);\n  const content = elementContentToString(ast);\n  const boxedContent = content.length > 0 ? `[${content}]` : '';\n\n  return `${leftNode}${left}${boxedContent}${right}${rightNode}`;\n};\n\nconst pathCompositionToString = (ast: GramPath): string => {\n  const lhs =\n    ast.children && ast.children.length > 0\n      ? pathToString(ast.children[0])\n      : '';\n  const rhs =\n    ast.children && ast.children.length > 1\n      ? pathToString(ast.children[1])\n      : '';\n  const relation =\n    ast.kind === 'left'\n      ? '<--'\n      : ast.kind === 'right'\n      ? '-->'\n      : ast.kind === 'either'\n      ? '--'\n      : lhs.length > 0 && rhs.length > 0\n      ? ','\n      : '';\n  const content = elementContentToString(ast);\n\n  return `[${content}${relation.length > 0 ? ' ' : ''}${relation}${\n    lhs.length > 0 ? ' ' : ''\n  }${lhs}${rhs.length > 0 ? ' ' : ''}${rhs}]`;\n};\n\nconst pairToString = (ast: GramPath): string => {\n  const lhs =\n    ast.children && ast.children.length > 0\n      ? pathToString(ast.children[0])\n      : '';\n  const rhs =\n    ast.children && ast.children.length > 1\n      ? pathToString(ast.children[1])\n      : '';\n  return `${lhs},${rhs.length > 0 ? ' ' : ''}${rhs}`;\n};\n\nconst hasAttributes = (p: GramPath) => p.id || p.labels || p.record;\n\nconst pathToString = (ast?: GramPath): string => {\n  const pathExpression = ast\n    ? `${\n        isGramEmptyPath(ast)\n          ? ''\n          : isGramNode(ast)\n          ? nodeToString(ast)\n          : isGramEdge(ast)\n          ? edgeToString(ast)\n          : hasAttributes(ast)\n          ? pathCompositionToString(ast)\n          : pairToString(ast)\n      }`\n    : '';\n  return pathExpression;\n};\n\nexport const stringify = (\n  ast: GramPath | GramSeq | GramPath[] | GramPropertyMap\n): string => {\n  if (Array.isArray(ast)) {\n    return ast.map(stringify).join(' ');\n  } else if (ast.type !== undefined) {\n    switch (ast.type) {\n      case 'path':\n        return pathToString(ast as GramPath);\n      case 'seq':\n        return stringify(ast.children as GramPath[]);\n    }\n  } else if (typeof ast === 'object') {\n    return recordMapToString(ast);\n  }\n\n  throw new Error(`Can't stringify <${ast}>`);\n};\n\nexport default stringify;\n","import { CompilerFunction, Plugin } from 'unified';\nimport { Node as UnistNode } from 'unist';\n// import {VFile} from 'vfile'\n\nimport { isGramPath, isGramSeq } from '@gram-data/gram-ast';\n\nimport stringify from './gram-stringify';\n\nconst stringifyCompiler: CompilerFunction = (element: UnistNode) => {\n  if (isGramPath(element)) {\n    return stringify(element);\n  }\n  if (isGramSeq(element)) {\n    return stringify(element);\n  } else {\n    throw new Error(`Don't know how to stringify \"${element.type}\"`);\n  }\n};\n\nconst gramStringifyPlugin: Plugin = function() {\n  this.Compiler = stringifyCompiler;\n};\n\nexport default gramStringifyPlugin;\n"],"names":["isEmpty","o","Object","keys","length","assertNever","x","Error","toStringLiteral","l","type","value","tag","unit","toStringValue","v","isGramLiteralArray","map","join","isLiteral","recordToString","record","fields","property","i","name","recordMapToString","entries","elementContentToString","ast","idString","id","labelsString","labels","recordString","nodeToString","edgeToString","left","kind","right","leftNode","isGramNode","children","rightNode","content","boxedContent","pathCompositionToString","lhs","pathToString","rhs","relation","pairToString","hasAttributes","p","pathExpression","isGramEmptyPath","isGramEdge","stringify","Array","isArray","undefined","stringifyCompiler","element","isGramPath","isGramSeq","gramStringifyPlugin","Compiler"],"mappings":"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"}