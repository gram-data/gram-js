{"version":3,"file":"gram-ast.umd.development.js","sources":["../src/gram-tokens.ts","../src/gram-types.ts"],"sourcesContent":["export const boolean = /true|false|TRUE|FALSE\\b(?!@)/;\nexport const hexadecimal = /-?0x(?:[0-9a-fA-F]+)\\b(?!@)/;\nexport const octal = /-?0(?:[0-7]+)\\b(?!@)/;\nexport const measurement = /-?(?:[0-9]|[1-9][0-9]+)(?:\\.[0-9]+)?[a-zA-Z]+\\b(?!@)/;\nexport const decimal = /-?(?:[0-9]|[1-9][0-9]+)\\.[0-9]+(?:[eE][-+]?[0-9]+)?\\b(?!@)/;\nexport const integer = /-?(?:[0-9]|[1-9][0-9]+)(?:[eE][-+]?[0-9]+)?\\b(?!@)/;\nexport const taggedString = /[a-zA-Z][0-9a-zA-Z_@]*`(?:\\\\[`bfnrt/\\\\]|\\\\u[a-fA-F0-9]{4}|[^`\\\\])*`/;\nexport const doubleQuotedString = /\"(?:\\\\[\"bfnrt/\\\\]|\\\\u[a-fA-F0-9]{4}|[^\"\\\\])*\"/;\nexport const singleQuotedString = /'(?:\\\\['bfnrt/\\\\]|\\\\u[a-fA-F0-9]{4}|[^'\\\\])*'/;\nexport const tickedString = /`(?:\\\\[`bfnrt/\\\\]|\\\\u[a-fA-F0-9]{4}|[^`\\\\])*`/;\nexport const symbol = /[a-zA-Z_][0-9a-zA-Z_]*\\b(?!@)/;\nexport const identifier = /[0-9a-zA-Z_@]+\\b@*/;\n","/**\n * # Gram AST Types\n *\n * These AST elements\n *\n * References:\n *\n * - [unist](https://github.com/syntax-tree/unist) - Universal Synax Tree\n * - [AST](https://en.wikipedia.org/wiki/Abstract_syntax_tree)\n * @packageDocumentation\n */\n\nimport {\n  Parent as UnistParent,\n  Literal as UnistLiteral,\n  Node as UnistNode,\n} from 'unist';\n\n/**\n * A union type of interfaces which are path-like.\n */\n// export type GramPathlike = GramUnit | GramNode | GramEdge | GramPath;\n\n/**\n * Path expressions are compositions of nodes and edges.\n *\n * The ast is a tree of GramNodes and GramEdges.\n * The relation of a Path is always left to right\n * regardless of the internal relations of any\n * contained Edges.\n * The leftmost syntactic Node is the head, which\n * will be the topmost Node in the descendent tree.\n */\nexport type GramPathlike = GramUnit | GramNode | GramEdge | GramPath;\n\n///////////////////////////////////////////////////////////////////////////////\n// Base ast types...\n\n/**\n * Base type for elements which have no children.\n */\nexport interface GramLeaf extends UnistNode {}\n\n/**\n * The base type for all path-like elements.\n */\nexport interface GramPathlikeAttributes extends UnistParent {\n  /**\n   * A type-scoped unique identifier.\n   *\n   * For example, 'a' in `()-[a]->()` or '_1' in `(_1)`\n   */\n  id?: string;\n\n  /**\n   * Labels are content.\n   *\n   * For example, 'Aye' in (:Aye)\n   */\n  labels?: string[];\n\n  /**\n   * The data content of the element.\n   *\n   */\n  record?: GramRecord;\n\n  children: GramPathlike[] | [];\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// Pathlike types...\n\n/**\n * Identity of all units.\n */\nexport const UNIT_ID = '0';\n\n/**\n * A GramUnit is an empty path expression which contains no sub-paths and has no identity.\n *\n * - denoted with matching square brackets: `[]`\n * - path equivalence: `[]`\n * - identity: no\n * - children: no\n * - labels: no\n * - record: no\n * - path length: 0\n * - path cardinality: 0\n * - information role: emptiness\n */\nexport interface GramUnit extends GramPathlikeAttributes {\n  /**\n   * Type discriminator for this AST element, always 'unit'.\n   */\n  type: 'unit';\n\n  id: '0';\n\n  labels: undefined;\n\n  record: undefined;\n\n  children: [];\n}\n\n/**\n * Type guard for GramUnit.\n *\n * @param o any object\n */\nexport const isGramUnit = (o: any): o is GramUnit =>\n  !!o.type && o.type === 'unit';\n\n/**\n * A GramNode is the foundation for attached data structures.\n *\n * - denoted with matching square brackets: `()`\n * - path equivalence: `[n] =~ (n)`\n * - identity: yes\n * - children: 0\n * - labels: yes\n * - record: yes\n * - path length: 0\n * - path cardinality: 1\n * - information role: an entity or a noun\n */\nexport interface GramNode extends GramPathlikeAttributes {\n  /**\n   * Type discriminator for this AST element, always 'node'.\n   */\n  type: 'node';\n\n  /**\n   * Always empty.\n   */\n  children: [];\n}\n\n/**\n * Type guard for GramNode.\n *\n * @param o any object\n */\nexport const isGramNode = (o: any): o is GramNode =>\n  !!o.type && o.type === 'node';\n\n/**\n * Navigable relations to compose path expressions.\n * Gram includes one extra relation that is not\n * navigable, the ',' pair relation used only in\n * path composition and not allowed in Edge definition.\n *\n * One of:\n *\n * - left   `(a)<--(b)`\n * - right  `(a)-->(b)`\n * - either `(a)--(b)`\n * - self   `(a) =~ (a)--(a)`\n */\nexport type Navigation = 'left' | 'right' | 'either';\n\nexport type Relation = Navigation | 'pair';\n\n/**\n * GramEdge is:\n *\n * - a path expression composing two nodes and a\n * - a path expression of length 1\n * - logically equivalent to an empty path (path with no children) within an enclosing path: `(n) =~ [n []]`\n * - the operand in path expressions\n * - usually a noun concept\n */\nexport interface GramEdge extends GramPathlikeAttributes {\n  /**\n   * Type discriminator for this AST element, always 'edge'.\n   */\n  type: 'edge';\n\n  /**\n   * The relationship between the nodes.\n   */\n  relation?: Navigation;\n\n  /**\n   * The operands of the Edge, known as \"children\" in the AST.\n   * \n   * children[0] is the 'left' child\n   * children[1] is the 'right' child\n   */\n  children: [GramNode, GramNode];\n}\n\n/**\n * Type guard for GramEdge.\n *\n * @param o any object\n */\nexport const isGramEdge = (o: any): o is GramEdge =>\n  'type' in o && 'relation' in o && o.type === 'edge';\n\n/**\n * GramPath contains nodes, edges and other paths that have been composed\n * into a path expression.\n *\n * - denoted with matching, non-empty square brackets: `[id]`\n * - path equivalence: `[]`\n * - identity: yes (required)\n * - children: yes (optional)\n * - labels: yes\n * - record: yes\n * - path length: sum(children[0].length, children[1].length)\n * - path cardinality: nodes().length\n * - information role: data annotation\n */\nexport interface GramPath extends GramPathlikeAttributes {\n  /**\n   * Type discriminator for this AST element, always 'path'.\n   */\n  type: 'path';\n\n  /**\n   * The relationship between the left and right children,\n   * or a 'pair' that associates without being navigable.\n   */\n  relation?: Relation;\n\n  /**\n   * Either a single child that is nested within this path,\n   * or two children which are composed into a path.\n   *\n   */\n  children: [GramPathlike] | [GramPathlike, GramPathlike];\n}\n\n/**\n * Type guard for a Path.\n *\n * @param o any object\n */\nexport const isGramPath = (o: any): o is GramPath =>\n  !!o.type && o.type === 'path';\n\n/**\n * A GramPathSeq is a sequence of paths.\n *\n */\nexport interface GramPathSeq extends GramPathlikeAttributes {\n  /**\n   * Type discriminator for this AST element, aways 'seq'.\n   */\n  type: 'seq';\n\n  children: GramPathlike[];\n}\n\n/**\n * Type guard for GramSeq.\n *\n * @param o any object\n */\nexport const isGramSeq = (o: any): o is GramPathSeq =>\n  !!o.type && o.type === 'seq';\n\nexport const isGramPathlike = (o: any): o is GramPathlike =>\n  isGramUnit(o) ||\n  isGramNode(o) ||\n  isGramEdge(o) ||\n  isGramPath(o) ||\n  isGramSeq(o);\n\n///////////////////////////////////////////////////////////////////////////////\n// Records...\n\n/**\n * GramRecordValues are a union of literals and nested records.\n */\nexport type GramRecordValue = GramLiteral | GramLiteral[] | GramRecord;\n\n/**\n * A GramRecord is a JSON-like nested data structure.\n */\nexport type GramRecord = { [key: string]: GramRecordValue };\n\n/**\n * Property is a name paired with a record value.\n */\nexport interface GramProperty extends GramLeaf {\n  /**\n   * Type discriminator for this AST element, always 'property'.\n   */\n  type: 'property';\n\n  /**\n   * The property name.\n   */\n  name: string;\n\n  /**\n   * The property value. Either a single literal, an array of literals, or a nested GramRecord.\n   */\n  value: GramRecordValue;\n}\n\n/**\n * Type guard for GramProperty.\n *\n * @param o any object\n */\nexport const isGramProperty = (o: any): o is GramProperty =>\n  !!o.type && o.type === 'property';\n\n/**\n * GramLiteral is a data value represented as plain text.\n */\nexport interface GramLiteral extends UnistLiteral {\n  type: string;\n  value: string;\n}\n\n/**\n * Type guard for GramSeq.\n *\n * @param o any object\n */\nexport const isLiteral = (o: any): o is GramLiteral => !!o.type && !!o.value;\n\n/**\n * Represents a boolean literal, like `true` or `false`.\n */\nexport interface BooleanLiteral extends GramLiteral {\n  /**\n   * Represents this variant of a Literal.\n   */\n  type: 'boolean';\n\n  value: 'true' | 'false';\n}\n\n/**\n * Type guard for GramSeq.\n *\n * @param o any object\n */\nexport const isBooleanLiteral = (o: any): o is BooleanLiteral =>\n  !!o.type && !!o.value && o.type === 'boolean';\n\n/**\n * Represents a string literal, like \"hello\".\n */\nexport interface StringLiteral extends GramLiteral {\n  /**\n   * Represents this variant of a Literal.\n   */\n  type: 'string';\n}\n\n/**\n * Type guard for GramSeq.\n *\n * @param o any object\n */\nexport const isStringLiteral = (o: any): o is StringLiteral =>\n  !!o.type && !!o.value && o.type === 'string';\n\n/**\n * Represents a tagged string, like md`# Title`\n */\nexport interface TaggedLiteral extends GramLiteral {\n  type: 'tagged';\n\n  /**\n   * The tag prefix of the string value.\n   */\n  tag: string;\n}\n\n/**\n * Type guard for GramSeq.\n *\n * @param o any object\n */\nexport const isTaggedLiteral = (o: any): o is TaggedLiteral =>\n  !!o.type && !!o.value && !!o.tag && o.type === 'tagged';\n\n/**\n * Represents an integer number, like 235276234.\n */\nexport interface IntegerLiteral extends GramLiteral {\n  type: 'integer';\n}\n\n/**\n * Type guard for GramSeq.\n *\n * @param o any object\n */\nexport const isIntegerLiteral = (o: any): o is IntegerLiteral =>\n  !!o.type && !!o.value && o.type === 'integer';\n\n/**\n * Represents a decimal with units, like 12.4px or 42.0mm\n */\nexport interface MeasurementLiteral extends GramLiteral {\n  type: 'measurement';\n\n  /**\n   * The unit suffix of the decimal value.\n   */\n  unit: string;\n}\n\n/**\n * Type guard for MeasurementLiteral.\n *\n * @param o any object\n */\nexport const isMeasurementLiteral = (o: any): o is MeasurementLiteral =>\n  !!o.type && !!o.value && !!o.unit && o.type === 'measurement';\n\n/**\n * Represents an decimal number, like 3.1495.\n */\nexport interface DecimalLiteral extends GramLiteral {\n  type: 'decimal';\n}\n\n/**\n * Type guard for DecimalLiteral.\n *\n * @param o any object\n */\nexport const isDecimalLiteral = (o: any): o is DecimalLiteral =>\n  !!o.type && !!o.value && o.type === 'decimal';\n\n/**\n * Represents an integer expressed in hexadecimal, like 0xc0d3.\n *\n * The prefix `0x` signifies a hexadecimal value to follow.\n */\nexport interface HexadecimalLiteral extends GramLiteral {\n  type: 'hexadecimal';\n}\n\n/**\n * Type guard for HexadecimalLiteral.\n *\n * @param o any object\n */\nexport const isHexadecimalLiteral = (o: any): o is HexadecimalLiteral =>\n  !!o.type && !!o.value && o.type === 'hexadecimal';\n\n/**\n * Represents an integer expressed in octal, like 01372.\n *\n * The prefix `0` signifies octal notation value to follow.\n * Without the leading 0, the number would represent an integer.\n */\nexport interface OctalLiteral extends GramLiteral {\n  type: 'octal';\n}\n\n/**\n * Type guard for OctalLiteral.\n *\n * @param o any object\n */\nexport const isOctalLiteral = (o: any): o is OctalLiteral =>\n  !!o.type && !!o.value && o.type === 'octal';\n\n/**\n * Represents a ISO8601 calendar date, like `2020-02-02`.\n * @see https://en.wikipedia.org/wiki/ISO_8601#Calendar_dates\n */\nexport interface DateLiteral extends TaggedLiteral {\n  tag: 'date';\n}\n\n/**\n * Type guard for DateLiteral.\n *\n * @param o any object\n */\nexport const isDateLiteral = (o: any): o is DateLiteral =>\n  !!o.type && !!o.value && !!o.tag && o.type === 'tagged' && o.tag === 'date';\n\n/**\n * Represents a WKT 2 geospatial value, like `POINT(-83.123 42.123)`\n * @see http://docs.opengeospatial.org/is/18-010r7/18-010r7.html\n * @see https://github.com/arthur-e/Wicket\n */\nexport interface GeospatialLiteral extends TaggedLiteral {\n  tag: 'geo';\n}\n\n/**\n * Type guard for GeospatialLiteral.\n *\n * @param o any object\n */\nexport const isGeospatialLiteral = (o: any): o is GeospatialLiteral =>\n  !!o.type && !!o.value && !!o.tag && o.type === 'tagged' && o.tag === 'geo';\n"],"names":["boolean","hexadecimal","octal","measurement","decimal","integer","taggedString","doubleQuotedString","singleQuotedString","tickedString","symbol","identifier","UNIT_ID","isGramUnit","o","type","isGramNode","isGramEdge","isGramPath","isGramSeq","isGramPathlike","isGramProperty","isLiteral","value","isBooleanLiteral","isStringLiteral","isTaggedLiteral","tag","isIntegerLiteral","isMeasurementLiteral","unit","isDecimalLiteral","isHexadecimalLiteral","isOctalLiteral","isDateLiteral","isGeospatialLiteral"],"mappings":"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"}